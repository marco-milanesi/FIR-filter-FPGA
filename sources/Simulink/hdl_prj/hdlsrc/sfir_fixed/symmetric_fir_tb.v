// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\sfir_fixed\symmetric_fir_tb.v
// Created: 2023-03-22 12:16:22
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y_out                         ce_out        1
// delayed_xout                  ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: symmetric_fir_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module symmetric_fir_tb;



  reg  clk;
  reg  reset_x;
  wire clk_enable;
  wire signed [15:0] rawData_h_in1;  // sfix16_En10
  wire signed [15:0] rawData_h_in2;  // sfix16_En10
  wire signed [15:0] rawData_h_in3;  // sfix16_En10
  wire signed [15:0] rawData_h_in4;  // sfix16_En10
  wire delayed_xout_done;  // ufix1
  wire rdEnb;
  wire delayed_xout_done_enb;  // ufix1
  reg [10:0] y_out_addr;  // ufix11
  wire delayed_xout_lastAddr;  // ufix1
  wire resetn;
  reg  check2_done;  // ufix1
  wire y_out_done;  // ufix1
  wire y_out_done_enb;  // ufix1
  wire y_out_active;  // ufix1
  reg signed [15:0] holdData_h_in4;  // sfix16_En10
  reg signed [15:0] h_in4_offset;  // sfix16_En10
  wire signed [15:0] h_in4_1;  // sfix16_En10
  reg signed [15:0] holdData_h_in3;  // sfix16_En10
  reg signed [15:0] h_in3_offset;  // sfix16_En10
  wire signed [15:0] h_in3_1;  // sfix16_En10
  reg signed [15:0] holdData_h_in2;  // sfix16_En10
  reg signed [15:0] h_in2_offset;  // sfix16_En10
  wire signed [15:0] h_in2_1;  // sfix16_En10
  reg signed [15:0] holdData_h_in1;  // sfix16_En10
  reg signed [15:0] h_in1_offset;  // sfix16_En10
  wire signed [15:0] h_in1_1;  // sfix16_En10
  reg [10:0] Data_Type_Conversion_out1_addr;  // ufix11
  wire Data_Type_Conversion_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire Data_Type_Conversion_out1_enb;  // ufix1
  wire [10:0] Data_Type_Conversion_out1_addr_delay_1;  // ufix11
  reg signed [31:0] fp_x_in;  // sfix32
  reg signed [15:0] rawData_x_in;  // sfix16_En10
  reg signed [31:0] status_x_in;  // sfix32
  reg signed [15:0] holdData_x_in;  // sfix16_En10
  reg signed [15:0] x_in_offset;  // sfix16_En10
  wire signed [15:0] x_in;  // sfix16_En10
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire signed [34:0] y_out;  // sfix35_En20
  wire signed [15:0] delayed_xout;  // sfix16_En10
  wire y_out_enb;  // ufix1
  wire y_out_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [10:0] y_out_addr_delay_1;  // ufix11
  reg signed [31:0] fp_y_out_expected;  // sfix32
  reg signed [34:0] y_out_expected;  // sfix35_En20
  reg signed [31:0] status_y_out_expected;  // sfix32
  wire signed [34:0] y_out_ref;  // sfix35_En20
  reg  y_out_testFailure;  // ufix1
  wire [10:0] delayed_xout_addr_delay_1;  // ufix11
  reg signed [31:0] fp_delayed_xout_expected;  // sfix32
  reg signed [15:0] delayed_xout_expected;  // sfix16_En10
  reg signed [31:0] status_delayed_xout_expected;  // sfix32
  wire signed [15:0] delayed_xout_ref;  // sfix16_En10
  reg  delayed_xout_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for h_in1
  assign rawData_h_in1 = 16'sb1111111101110111;



  // Data source for h_in2
  assign rawData_h_in2 = 16'sb1111111110101010;



  // Data source for h_in3
  assign rawData_h_in3 = 16'sb0000000011001111;



  // Data source for h_in4
  assign rawData_h_in4 = 16'sb0000000110100000;



  assign delayed_xout_done_enb = delayed_xout_done & rdEnb;



  assign delayed_xout_lastAddr = y_out_addr >= 11'b11111010000;



  assign delayed_xout_done = delayed_xout_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset_x)
    begin : checkDone_2
      if (reset_x) begin
        check2_done <= 0;
      end
      else begin
        if (delayed_xout_done_enb) begin
          check2_done <= delayed_xout_done;
        end
      end
    end

  assign y_out_done_enb = y_out_done & rdEnb;



  assign y_out_active = y_out_addr != 11'b11111010000;



  // holdData reg for Constant3_out1
  always @(posedge clk or posedge reset_x)
    begin : stimuli_Constant3_out1
      if (reset_x) begin
        holdData_h_in4 <= 16'bx;
      end
      else begin
        holdData_h_in4 <= rawData_h_in4;
      end
    end

  always @(rawData_h_in4 or rdEnb)
    begin : stimuli_Constant3_out1_1
      if (rdEnb == 1'b0) begin
        h_in4_offset <= holdData_h_in4;
      end
      else begin
        h_in4_offset <= rawData_h_in4;
      end
    end

  assign #2 h_in4_1 = h_in4_offset;

  // holdData reg for Constant2_out1
  always @(posedge clk or posedge reset_x)
    begin : stimuli_Constant2_out1
      if (reset_x) begin
        holdData_h_in3 <= 16'bx;
      end
      else begin
        holdData_h_in3 <= rawData_h_in3;
      end
    end

  always @(rawData_h_in3 or rdEnb)
    begin : stimuli_Constant2_out1_1
      if (rdEnb == 1'b0) begin
        h_in3_offset <= holdData_h_in3;
      end
      else begin
        h_in3_offset <= rawData_h_in3;
      end
    end

  assign #2 h_in3_1 = h_in3_offset;

  // holdData reg for Constant1_out1
  always @(posedge clk or posedge reset_x)
    begin : stimuli_Constant1_out1
      if (reset_x) begin
        holdData_h_in2 <= 16'bx;
      end
      else begin
        holdData_h_in2 <= rawData_h_in2;
      end
    end

  always @(rawData_h_in2 or rdEnb)
    begin : stimuli_Constant1_out1_1
      if (rdEnb == 1'b0) begin
        h_in2_offset <= holdData_h_in2;
      end
      else begin
        h_in2_offset <= rawData_h_in2;
      end
    end

  assign #2 h_in2_1 = h_in2_offset;

  // holdData reg for Constant_out1
  always @(posedge clk or posedge reset_x)
    begin : stimuli_Constant_out1
      if (reset_x) begin
        holdData_h_in1 <= 16'bx;
      end
      else begin
        holdData_h_in1 <= rawData_h_in1;
      end
    end

  always @(rawData_h_in1 or rdEnb)
    begin : stimuli_Constant_out1_1
      if (rdEnb == 1'b0) begin
        h_in1_offset <= holdData_h_in1;
      end
      else begin
        h_in1_offset <= rawData_h_in1;
      end
    end

  assign #2 h_in1_1 = h_in1_offset;

  assign Data_Type_Conversion_out1_active = Data_Type_Conversion_out1_addr != 11'b11111010000;



  assign Data_Type_Conversion_out1_enb = Data_Type_Conversion_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2000
  always @(posedge clk or posedge reset_x)
    begin : DataTypeConversion_process
      if (reset_x == 1'b1) begin
        Data_Type_Conversion_out1_addr <= 11'b00000000000;
      end
      else begin
        if (Data_Type_Conversion_out1_enb) begin
          if (Data_Type_Conversion_out1_addr >= 11'b11111010000) begin
            Data_Type_Conversion_out1_addr <= 11'b00000000000;
          end
          else begin
            Data_Type_Conversion_out1_addr <= Data_Type_Conversion_out1_addr + 11'b00000000001;
          end
        end
      end
    end



  assign #1 Data_Type_Conversion_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for x_in
  initial
    begin : x_in_fileread
      fp_x_in = $fopen("x_in.dat", "r");
      status_x_in = $rewind(fp_x_in);
    end

  always @(Data_Type_Conversion_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_x_in <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_x_in = $fscanf(fp_x_in, "%h", rawData_x_in);
      end
    end

  // holdData reg for Data_Type_Conversion_out1
  always @(posedge clk or posedge reset_x)
    begin : stimuli_Data_Type_Conversion_out1
      if (reset_x) begin
        holdData_x_in <= 16'bx;
      end
      else begin
        holdData_x_in <= rawData_x_in;
      end
    end

  always @(rawData_x_in or rdEnb)
    begin : stimuli_Data_Type_Conversion_out1_1
      if (rdEnb == 1'b0) begin
        x_in_offset <= holdData_x_in;
      end
      else begin
        x_in_offset <= rawData_x_in;
      end
    end

  assign #2 x_in = x_in_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset_x;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset_x)
    begin : u_enable_delay
      if (reset_x) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_x_gen
      reset_x <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset_x <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  symmetric_fir u_symmetric_fir (.clk(clk),
                                 .reset_x(reset_x),
                                 .clk_enable(clk_enable),
                                 .x_in(x_in),  // sfix16_En10
                                 .h_in1(h_in1_1),  // sfix16_En10
                                 .h_in2(h_in2_1),  // sfix16_En10
                                 .h_in3(h_in3_1),  // sfix16_En10
                                 .h_in4(h_in4_1),  // sfix16_En10
                                 .ce_out(ce_out),
                                 .y_out(y_out),  // sfix35_En20
                                 .delayed_xout(delayed_xout)  // sfix16_En10
                                 );

  assign y_out_enb = ce_out & y_out_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2000
  always @(posedge clk or posedge reset_x)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        y_out_addr <= 11'b00000000000;
      end
      else begin
        if (y_out_enb) begin
          if (y_out_addr >= 11'b11111010000) begin
            y_out_addr <= 11'b00000000000;
          end
          else begin
            y_out_addr <= y_out_addr + 11'b00000000001;
          end
        end
      end
    end



  assign y_out_lastAddr = y_out_addr >= 11'b11111010000;



  assign y_out_done = y_out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset_x)
    begin : checkDone_1
      if (reset_x) begin
        check1_done <= 0;
      end
      else begin
        if (y_out_done_enb) begin
          check1_done <= y_out_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;



  assign #1 y_out_addr_delay_1 = y_out_addr;

  // Data source for y_out_expected
  initial
    begin : y_out_expected_fileread
      fp_y_out_expected = $fopen("y_out_expected.dat", "r");
      status_y_out_expected = $rewind(fp_y_out_expected);
    end

  always @(y_out_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        y_out_expected <= 35'bx;
      end
      else if (ce_out == 1) begin
        status_y_out_expected = $fscanf(fp_y_out_expected, "%h", y_out_expected);
      end
    end

  assign y_out_ref = y_out_expected;

  always @(posedge clk or posedge reset_x)
    begin : y_out_checker
      if (reset_x == 1'b1) begin
        y_out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && y_out !== y_out_ref) begin
          y_out_testFailure <= 1'b1;
          $display("ERROR in y_out at time %t : Expected '%h' Actual '%h'", $time, y_out_ref, y_out);
        end
      end
    end

  assign #1 delayed_xout_addr_delay_1 = y_out_addr;

  // Data source for delayed_xout_expected
  initial
    begin : delayed_xout_expected_fileread
      fp_delayed_xout_expected = $fopen("delayed_xout_expected.dat", "r");
      status_delayed_xout_expected = $rewind(fp_delayed_xout_expected);
    end

  always @(delayed_xout_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        delayed_xout_expected <= 16'bx;
      end
      else if (ce_out == 1) begin
        status_delayed_xout_expected = $fscanf(fp_delayed_xout_expected, "%h", delayed_xout_expected);
      end
    end

  assign delayed_xout_ref = delayed_xout_expected;

  always @(posedge clk or posedge reset_x)
    begin : delayed_xout_checker
      if (reset_x == 1'b1) begin
        delayed_xout_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && delayed_xout !== delayed_xout_ref) begin
          delayed_xout_testFailure <= 1'b1;
          $display("ERROR in delayed_xout at time %t : Expected '%h' Actual '%h'", $time, delayed_xout_ref, delayed_xout);
        end
      end
    end

  assign testFailure = y_out_testFailure | delayed_xout_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // symmetric_fir_tb

